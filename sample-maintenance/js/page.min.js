
// Accordion JS below 
let acc = document.getElementsByClassName("accordion");

for(let i=0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    let accordionPanel = this.nextElementSibling;
    if (accordionPanel.style.maxHeight) {
      accordionPanel.style.maxHeight = null;
    } else {
      accordionPanel.style.maxHeight = accordionPanel.scrollHeight + "px";
    } 
  });
}

// Learning Sample Code Closure

function display () {
    var a = 100;

    function x() {
        console.log(a);
    }

    a = 400;
    return x;
}

var result = display();
//result();

function printNumber () {

    for(var i=0; i<5; i++) {
        function renderThis(pram) {
            setTimeout(function(){
                console.log(pram);
            }, pram*1000);
        }
        renderThis(i);
    }

    console.log("print 01");
    console.log("print 02");
}

//printNumber();

//First class function : Ability to be used as a values 

/*let a = 100;
var b = 10;
const c = 4;
if(true){
    console.log(b);
    const c = 2;
    console.log(c);
    var b = 20;
    let a;
    console.log(a);
    a=12;
    console.log(a);
}
console.log(a);
console.log(b);
console.log(c);

function hoistingDisplay() {
  var b = 40;
  console.log(b);
}
hoistingDisplay();
console.log(b);
*/


// Closure encapsulation and data hiding 

function counter() {
  let count = 0;

  function increament () {
    ++count;
    console.log(count);
  }

  return increament;
}
//console.log(count);
var abc = counter();
/*abc();
abc();
abc();*/


function check(param) {
  let count = param;

  this.increament = function() {
    ++count;
    console.log(count);
  }

  return {
    outside: this.increament
  }

}

var sample1 = new check(2);
console.log("contructor");
//sample1.outside();
//sample1.outside();
//sample1.increament();



//The destructuring assignment syntax is a JavaScript expression 
//that makes it possible to unpack values from arrays, 
//or properties from objects, into distinct variables.
let person = {
  firstName: 'John',
  lastName: 'Doe'
};
//console.log(person);

let { firstName, lastName, middleName = '', currentAge = 18 } = person;
//console.log(currentAge);


// Spread opertor It expands the array into individual elements. 
//So, it can be used to expand the array in a places where zero 
//or more elements are expected.
function sum(x, y, z) {
  return x + y + z +"Rs is there with "+ this.firstName;
}

const numbers = [1, 2, 3,];
let myObject = {
  firstName: "Enson",
  total: 600
}

// Spread operator is usefull to pass as object or array in function initialisation
// This will reduce use of apply or call methods 
console.log(sum(...numbers));
// expected output: 6

//console.log(sum.apply(null, numbers));
// expected output: 6

console.log(sum.apply(myObject, numbers));
console.log(sum.call(myObject, 4,2,3));
let myBind = sum.bind(myObject, 4,2,3);
console.log(myBind());

// Some exmaples 
function Calculate(param){
  let fee = param;

  this.getMonthlyFee = function() {
    let remainingAmount = this.total - fee;
    return "Hello "+ this.firstName+ " you have so much amount "+remainingAmount;
  }

  return this.getMonthlyFee();

}

Calculate.prototype.display = function() {
  return "this is display function";
}

var employee = new Calculate(40);
console.log(employee.getMonthlyFee.call(myObject));
console.log(employee.display());


//Sort the array
var sortArray = [ 333, 1, 232, 2, 21312, 45 , 4, 5, 232, 1, 2];

var [a, b, c, d] = sortArray;
console.log(a);

sortArray.sort((a, b)=>{
 return a-b;
});
console.log(sortArray);


// Map, filter, reduce,  for each

let map = sortArray.map(function(ele, index, arr){
  return ele*2;
});
console.log("Map funct  "+map);

let filter = sortArray.filter(function(ele, index, arr){
 return arr.indexOf(ele) === index;
})
console.log("filter "+filter);

let reduce = sortArray.reduce(function(initial, sum){
  return initial+sum;
})
console.log("Reduce "+reduce);

let useSet =  new Set(sortArray);

console.log(useSet.size);
console.log(useSet.has(11));
console.log([...useSet]);

// String and Array
let str = "Heloothere"

console.log(str.slice(0, -4));
console.log(str.substring(0, 4));

let array = [1, 2, 3, 4, 5, 6, 7, 8, 9];
console.log(array.slice(0, 4));
console.log(array.splice(4, 2, "Enson"));
console.log(array)


// Async, wait and promise kindly check ... React js for more details
const makeRequest = () =>
  getJSON("http://dummy.restapiexample.com/api/v1/employees")
    .then(data => {
      console.log(data);
    })

makeRequest()

function getJSON(url) {
  let xhr = new XMLHttpRequest();
  xhr.open('GET', url, true);
  xhr.onload = function() {
    then(xhr.response);
  }
  xhr.send();
}